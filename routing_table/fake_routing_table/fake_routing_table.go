// This file was generated by counterfeiter
package fake_routing_table

import (
	"sync"

	"github.com/cloudfoundry-incubator/route-emitter/routing_table"
)

type FakeRoutingTable struct {
	SyncStub        func(routes routing_table.RoutesByRoutingKey, endpoints routing_table.EndpointsByRoutingKey) routing_table.MessagesToEmit
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		routes    routing_table.RoutesByRoutingKey
		endpoints routing_table.EndpointsByRoutingKey
	}
	syncReturns struct {
		result1 routing_table.MessagesToEmit
	}
	MessagesToEmitStub        func() routing_table.MessagesToEmit
	messagesToEmitMutex       sync.RWMutex
	messagesToEmitArgsForCall []struct{}
	messagesToEmitReturns struct {
		result1 routing_table.MessagesToEmit
	}
	RouteCountStub        func() int
	routeCountMutex       sync.RWMutex
	routeCountArgsForCall []struct{}
	routeCountReturns struct {
		result1 int
	}
	SetRoutesStub        func(key routing_table.RoutingKey, routes routing_table.Routes) routing_table.MessagesToEmit
	setRoutesMutex       sync.RWMutex
	setRoutesArgsForCall []struct {
		key    routing_table.RoutingKey
		routes routing_table.Routes
	}
	setRoutesReturns struct {
		result1 routing_table.MessagesToEmit
	}
	RemoveRoutesStub        func(key routing_table.RoutingKey) routing_table.MessagesToEmit
	removeRoutesMutex       sync.RWMutex
	removeRoutesArgsForCall []struct {
		key routing_table.RoutingKey
	}
	removeRoutesReturns struct {
		result1 routing_table.MessagesToEmit
	}
	AddOrUpdateEndpointStub        func(key routing_table.RoutingKey, endpoint routing_table.Endpoint) routing_table.MessagesToEmit
	addOrUpdateEndpointMutex       sync.RWMutex
	addOrUpdateEndpointArgsForCall []struct {
		key      routing_table.RoutingKey
		endpoint routing_table.Endpoint
	}
	addOrUpdateEndpointReturns struct {
		result1 routing_table.MessagesToEmit
	}
	RemoveEndpointStub        func(key routing_table.RoutingKey, endpoint routing_table.Endpoint) routing_table.MessagesToEmit
	removeEndpointMutex       sync.RWMutex
	removeEndpointArgsForCall []struct {
		key      routing_table.RoutingKey
		endpoint routing_table.Endpoint
	}
	removeEndpointReturns struct {
		result1 routing_table.MessagesToEmit
	}
}

func (fake *FakeRoutingTable) Sync(routes routing_table.RoutesByRoutingKey, endpoints routing_table.EndpointsByRoutingKey) routing_table.MessagesToEmit {
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		routes    routing_table.RoutesByRoutingKey
		endpoints routing_table.EndpointsByRoutingKey
	}{routes, endpoints})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(routes, endpoints)
	} else {
		return fake.syncReturns.result1
	}
}

func (fake *FakeRoutingTable) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeRoutingTable) SyncArgsForCall(i int) (routing_table.RoutesByRoutingKey, routing_table.EndpointsByRoutingKey) {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return fake.syncArgsForCall[i].routes, fake.syncArgsForCall[i].endpoints
}

func (fake *FakeRoutingTable) SyncReturns(result1 routing_table.MessagesToEmit) {
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 routing_table.MessagesToEmit
	}{result1}
}

func (fake *FakeRoutingTable) MessagesToEmit() routing_table.MessagesToEmit {
	fake.messagesToEmitMutex.Lock()
	fake.messagesToEmitArgsForCall = append(fake.messagesToEmitArgsForCall, struct{}{})
	fake.messagesToEmitMutex.Unlock()
	if fake.MessagesToEmitStub != nil {
		return fake.MessagesToEmitStub()
	} else {
		return fake.messagesToEmitReturns.result1
	}
}

func (fake *FakeRoutingTable) MessagesToEmitCallCount() int {
	fake.messagesToEmitMutex.RLock()
	defer fake.messagesToEmitMutex.RUnlock()
	return len(fake.messagesToEmitArgsForCall)
}

func (fake *FakeRoutingTable) MessagesToEmitReturns(result1 routing_table.MessagesToEmit) {
	fake.MessagesToEmitStub = nil
	fake.messagesToEmitReturns = struct {
		result1 routing_table.MessagesToEmit
	}{result1}
}

func (fake *FakeRoutingTable) RouteCount() int {
	fake.routeCountMutex.Lock()
	fake.routeCountArgsForCall = append(fake.routeCountArgsForCall, struct{}{})
	fake.routeCountMutex.Unlock()
	if fake.RouteCountStub != nil {
		return fake.RouteCountStub()
	} else {
		return fake.routeCountReturns.result1
	}
}

func (fake *FakeRoutingTable) RouteCountCallCount() int {
	fake.routeCountMutex.RLock()
	defer fake.routeCountMutex.RUnlock()
	return len(fake.routeCountArgsForCall)
}

func (fake *FakeRoutingTable) RouteCountReturns(result1 int) {
	fake.RouteCountStub = nil
	fake.routeCountReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRoutingTable) SetRoutes(key routing_table.RoutingKey, routes routing_table.Routes) routing_table.MessagesToEmit {
	fake.setRoutesMutex.Lock()
	fake.setRoutesArgsForCall = append(fake.setRoutesArgsForCall, struct {
		key    routing_table.RoutingKey
		routes routing_table.Routes
	}{key, routes})
	fake.setRoutesMutex.Unlock()
	if fake.SetRoutesStub != nil {
		return fake.SetRoutesStub(key, routes)
	} else {
		return fake.setRoutesReturns.result1
	}
}

func (fake *FakeRoutingTable) SetRoutesCallCount() int {
	fake.setRoutesMutex.RLock()
	defer fake.setRoutesMutex.RUnlock()
	return len(fake.setRoutesArgsForCall)
}

func (fake *FakeRoutingTable) SetRoutesArgsForCall(i int) (routing_table.RoutingKey, routing_table.Routes) {
	fake.setRoutesMutex.RLock()
	defer fake.setRoutesMutex.RUnlock()
	return fake.setRoutesArgsForCall[i].key, fake.setRoutesArgsForCall[i].routes
}

func (fake *FakeRoutingTable) SetRoutesReturns(result1 routing_table.MessagesToEmit) {
	fake.SetRoutesStub = nil
	fake.setRoutesReturns = struct {
		result1 routing_table.MessagesToEmit
	}{result1}
}

func (fake *FakeRoutingTable) RemoveRoutes(key routing_table.RoutingKey) routing_table.MessagesToEmit {
	fake.removeRoutesMutex.Lock()
	fake.removeRoutesArgsForCall = append(fake.removeRoutesArgsForCall, struct {
		key routing_table.RoutingKey
	}{key})
	fake.removeRoutesMutex.Unlock()
	if fake.RemoveRoutesStub != nil {
		return fake.RemoveRoutesStub(key)
	} else {
		return fake.removeRoutesReturns.result1
	}
}

func (fake *FakeRoutingTable) RemoveRoutesCallCount() int {
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	return len(fake.removeRoutesArgsForCall)
}

func (fake *FakeRoutingTable) RemoveRoutesArgsForCall(i int) routing_table.RoutingKey {
	fake.removeRoutesMutex.RLock()
	defer fake.removeRoutesMutex.RUnlock()
	return fake.removeRoutesArgsForCall[i].key
}

func (fake *FakeRoutingTable) RemoveRoutesReturns(result1 routing_table.MessagesToEmit) {
	fake.RemoveRoutesStub = nil
	fake.removeRoutesReturns = struct {
		result1 routing_table.MessagesToEmit
	}{result1}
}

func (fake *FakeRoutingTable) AddOrUpdateEndpoint(key routing_table.RoutingKey, endpoint routing_table.Endpoint) routing_table.MessagesToEmit {
	fake.addOrUpdateEndpointMutex.Lock()
	fake.addOrUpdateEndpointArgsForCall = append(fake.addOrUpdateEndpointArgsForCall, struct {
		key      routing_table.RoutingKey
		endpoint routing_table.Endpoint
	}{key, endpoint})
	fake.addOrUpdateEndpointMutex.Unlock()
	if fake.AddOrUpdateEndpointStub != nil {
		return fake.AddOrUpdateEndpointStub(key, endpoint)
	} else {
		return fake.addOrUpdateEndpointReturns.result1
	}
}

func (fake *FakeRoutingTable) AddOrUpdateEndpointCallCount() int {
	fake.addOrUpdateEndpointMutex.RLock()
	defer fake.addOrUpdateEndpointMutex.RUnlock()
	return len(fake.addOrUpdateEndpointArgsForCall)
}

func (fake *FakeRoutingTable) AddOrUpdateEndpointArgsForCall(i int) (routing_table.RoutingKey, routing_table.Endpoint) {
	fake.addOrUpdateEndpointMutex.RLock()
	defer fake.addOrUpdateEndpointMutex.RUnlock()
	return fake.addOrUpdateEndpointArgsForCall[i].key, fake.addOrUpdateEndpointArgsForCall[i].endpoint
}

func (fake *FakeRoutingTable) AddOrUpdateEndpointReturns(result1 routing_table.MessagesToEmit) {
	fake.AddOrUpdateEndpointStub = nil
	fake.addOrUpdateEndpointReturns = struct {
		result1 routing_table.MessagesToEmit
	}{result1}
}

func (fake *FakeRoutingTable) RemoveEndpoint(key routing_table.RoutingKey, endpoint routing_table.Endpoint) routing_table.MessagesToEmit {
	fake.removeEndpointMutex.Lock()
	fake.removeEndpointArgsForCall = append(fake.removeEndpointArgsForCall, struct {
		key      routing_table.RoutingKey
		endpoint routing_table.Endpoint
	}{key, endpoint})
	fake.removeEndpointMutex.Unlock()
	if fake.RemoveEndpointStub != nil {
		return fake.RemoveEndpointStub(key, endpoint)
	} else {
		return fake.removeEndpointReturns.result1
	}
}

func (fake *FakeRoutingTable) RemoveEndpointCallCount() int {
	fake.removeEndpointMutex.RLock()
	defer fake.removeEndpointMutex.RUnlock()
	return len(fake.removeEndpointArgsForCall)
}

func (fake *FakeRoutingTable) RemoveEndpointArgsForCall(i int) (routing_table.RoutingKey, routing_table.Endpoint) {
	fake.removeEndpointMutex.RLock()
	defer fake.removeEndpointMutex.RUnlock()
	return fake.removeEndpointArgsForCall[i].key, fake.removeEndpointArgsForCall[i].endpoint
}

func (fake *FakeRoutingTable) RemoveEndpointReturns(result1 routing_table.MessagesToEmit) {
	fake.RemoveEndpointStub = nil
	fake.removeEndpointReturns = struct {
		result1 routing_table.MessagesToEmit
	}{result1}
}

var _ routing_table.RoutingTable = new(FakeRoutingTable)
